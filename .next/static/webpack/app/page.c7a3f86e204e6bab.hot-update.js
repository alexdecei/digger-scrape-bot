"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/hooks/useSearch.tsx":
/*!*********************************!*\
  !*** ./src/hooks/useSearch.tsx ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSearch: () => (/* binding */ useSearch)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _hooks_use_toast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/hooks/use-toast */ \"(app-pages-browser)/./src/hooks/use-toast.ts\");\n/* harmony import */ var _utils_apiService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/utils/apiService */ \"(app-pages-browser)/./src/utils/apiService.ts\");\nvar _s = $RefreshSig$();\n\n\n\nconst useSearch = ()=>{\n    _s();\n    const abortRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const getInitialState = ()=>{\n        if (true) {\n            const savedFilters = localStorage.getItem('digger_filters');\n            if (savedFilters) {\n                try {\n                    return JSON.parse(savedFilters);\n                } catch (e) {\n                    console.log('❌ Error parsing saved filters', e);\n                }\n            }\n        }\n        return {\n            mode: 'Statut',\n            postalCodes: [],\n            names: [],\n            codes: [],\n            dateRange: {\n                from: null,\n                to: null\n            }\n        };\n    };\n    const [filters, setFilters] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(getInitialState);\n    const [isSearching, setIsSearching] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useSearch.useEffect\": ()=>{\n            localStorage.setItem('digger_filters', JSON.stringify(filters));\n            if (!filters || !filters.dateRange.from) {\n                resetSearchState();\n            }\n        }\n    }[\"useSearch.useEffect\"], [\n        filters\n    ]);\n    const resetSearchState = ()=>{\n        setIsSearching(false);\n    };\n    const startSearch = async ()=>{\n        var _abortRef_current;\n        console.log(filters);\n        // Normalisation de la date\n        const rawDate = filters.dateRange.from;\n        const parsedDate = typeof rawDate === 'string' ? new Date(rawDate) : rawDate;\n        console.log(\"ℹ️ lancement useSearch\");\n        if (!parsedDate || isNaN(parsedDate.getTime())) {\n            (0,_hooks_use_toast__WEBPACK_IMPORTED_MODULE_1__.toast)({\n                title: \"Date invalide\",\n                description: \"La date de début est absente ou invalide.\",\n                variant: \"destructive\"\n            });\n            setIsSearching(false); // ✅ corrige le blocage du bouton\n            return;\n        }\n        (_abortRef_current = abortRef.current) === null || _abortRef_current === void 0 ? void 0 : _abortRef_current.abort(); // Stop any previous search\n        const controller = new AbortController();\n        abortRef.current = controller;\n        try {\n            setIsSearching(true);\n            console.log(\"ℹ️ lancement api search\");\n            const response = await _utils_apiService__WEBPACK_IMPORTED_MODULE_2__.apiService.search({\n                mode: filters.mode,\n                postalCodes: filters.postalCodes,\n                names: filters.names,\n                codes: filters.codes,\n                date: parsedDate.toISOString()\n            }, controller.signal); // 👈 signal ici\n            if (!response.success) {\n                throw new Error(response.error || 'Unknown error');\n            }\n            (0,_hooks_use_toast__WEBPACK_IMPORTED_MODULE_1__.toast)({\n                title: \"Search Started\",\n                description: \"The scraping process was triggered successfully.\"\n            });\n        } catch (error) {\n            console.error('Error triggering search:', error);\n            (0,_hooks_use_toast__WEBPACK_IMPORTED_MODULE_1__.toast)({\n                title: \"Search Error\",\n                description: error.message || \"Something went wrong.\",\n                variant: \"destructive\"\n            });\n        } finally{\n            setIsSearching(false);\n        }\n    };\n    const stopSearch = ()=>{\n        if (abortRef.current) {\n            abortRef.current.abort();\n            setIsSearching(false);\n            (0,_hooks_use_toast__WEBPACK_IMPORTED_MODULE_1__.toast)({\n                title: \"Recherche annulée\",\n                description: \"La recherche a été interrompue.\"\n            });\n        }\n    };\n    // Toutes tes méthodes de gestion des filtres inchangées\n    const updateMode = (mode)=>{\n        setFilters((prev)=>({\n                ...prev,\n                mode\n            }));\n    };\n    const addPostalCode = (postalCode)=>{\n        if (!postalCode.trim() || filters.postalCodes.includes(postalCode.trim())) return;\n        setFilters((prev)=>({\n                ...prev,\n                postalCodes: [\n                    ...prev.postalCodes,\n                    postalCode.trim()\n                ]\n            }));\n    };\n    const removePostalCode = (postalCode)=>{\n        setFilters((prev)=>({\n                ...prev,\n                postalCodes: prev.postalCodes.filter((pc)=>pc !== postalCode)\n            }));\n    };\n    const addName = (name)=>{\n        if (!name.trim()) return;\n        const namesList = name.split(',').map((n)=>n.trim()).filter((n)=>n);\n        const newNames = namesList.filter((n)=>!filters.names.includes(n));\n        if (newNames.length === 0) return;\n        setFilters((prev)=>({\n                ...prev,\n                names: [\n                    ...prev.names,\n                    ...newNames\n                ]\n            }));\n    };\n    const removeName = (name)=>{\n        setFilters((prev)=>({\n                ...prev,\n                names: prev.names.filter((n)=>n !== name)\n            }));\n    };\n    const addCode = (code)=>{\n        if (!code.trim() || filters.codes.includes(code.trim())) return;\n        setFilters((prev)=>({\n                ...prev,\n                codes: [\n                    ...prev.codes,\n                    code.trim()\n                ]\n            }));\n    };\n    const removeCode = (code)=>{\n        setFilters((prev)=>({\n                ...prev,\n                codes: prev.codes.filter((c)=>c !== code)\n            }));\n    };\n    const updateDateRange = (from)=>{\n        setFilters((prev)=>({\n                ...prev,\n                dateRange: {\n                    from,\n                    to: null\n                }\n            }));\n    };\n    const resetFilters = ()=>{\n        const emptyFilters = {\n            mode: 'Statut',\n            postalCodes: [],\n            names: [],\n            codes: [],\n            dateRange: {\n                from: null,\n                to: null\n            }\n        };\n        setFilters(emptyFilters);\n        localStorage.removeItem('digger_filters');\n    };\n    const addNamesFromText = (text)=>{\n        if (!text.trim()) return;\n        const namesArray = text.split(/[\\n,]/).map((name)=>name.trim()).filter((name)=>name && !filters.names.includes(name));\n        if (namesArray.length === 0) return;\n        setFilters((prev)=>({\n                ...prev,\n                names: [\n                    ...prev.names,\n                    ...namesArray\n                ]\n            }));\n    };\n    return {\n        filters,\n        isSearching,\n        resetSearchState,\n        stopSearch,\n        startSearch,\n        updateMode,\n        addPostalCode,\n        removePostalCode,\n        addName,\n        removeName,\n        addCode,\n        removeCode,\n        updateDateRange,\n        resetFilters,\n        addNamesFromText\n    };\n};\n_s(useSearch, \"QvUEOwGGSnIgL3qUfhS6s2G/WMM=\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/hooks/useSearch.tsx\n"));

/***/ })

});